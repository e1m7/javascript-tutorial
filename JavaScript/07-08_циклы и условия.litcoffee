
Лекция 7-8: циклы и сравнения
=============================

Инкремент/декремент
===================

++ прибавляет 1 к числу
-- вычитает 1 от числа

    let i = 3;
    i++;                  // i=4

    let j = 0;
    j--;                  // i=-1

Замечание: постфиксный оператор выполняет действие после выражения

    let a = 3;
    let b = a++;
    // a = ?
    // b = ?

Замечание: префиксный оператор выполняет действие до выражения

    let a = 3;
    let b = ++a;
    // a = ?
    // b = ?

Цикл for
========

Цикл For самый используемый цикл в языке JavaScript

  1) for = ключевое слово
  2) initialization = инициализация переменных
  3) condition = условие продолжения цикла
  4) step = код после очередной итерации

    for (initialization; condition; step) {
      // блок кода
    }

Пример: вывести все элементы массива на экран по одному

    const list = ['a', 'b', 'c'];
    for (let i = 0; i < list.length; i++) {
      console.log(i);
    }

Замечание: все три части for являются не обязательными
Замечание: возможно использование вложенных циклов

    const coords = [
      [1, 2],
      [4, 7],
      [10, -3],
    ];

    for (let i = 0; i < coords.length; i++) {
      for (let j = 0; j < coords[i].length; j++) {
        console.log(coords[i][j]);
      }
    }

Замечание: есть три специальных возможности

  1) слово continue (прекращение выполнения итерации, переход к новой)
  1) слово break (прекращение выполнения цикла, выход за него)
  1) метка (переход на метку, которая поставлена где-то в коде)

Пример 1: найти сумму чисел 0-100, но как только сумма станет >30 хватит

    let s = 0;
    for (let i = 0; i < 100; i++) {
        console.log("Слагаемое i = " + i);
        s += i;
        if (s > 30) {
            break;
        }
    }
    console.log("Сумма = " + s);

Пример 2: найти сумму чисел 0-100, но тех которые делятся на 13 и 17.

    let s = 0;
    for (let i = 0; i < 100; i++) {
        if (i % 13 == 0 || i % 17 == 0) {
            s += i;
        } else {
            continue;
        }
        console.log("Слагаемое i = " + i);
    }
    console.log("Сумма = " + s);

Пример 3: пройти по вложенному массиву и найти в нем элемент = 10.

    console.log('Первая строка');
    fin:
    for (let i = 0; i < coords.length; i++) {
        for (let j = 0; j < coords[i].length; j++) {
            if (coords[i][j] == 10) {
                console.log('Есть 10!');
                continue fin;
            }
        }
    }
    console.log('Вторая строка');


Цикл While
==========

Цикл While выполняется пока верно его условие

    while (condition) {
      // блок кода
    }

Замечание: есть вариант, при котором блок кода идет сначала

    do {
      // блок кода
    } while (condition);

Замечание: цикл часто используют при "всегда верном" условии
Замечание: выход из такого цикла происходит через break + условие

    let i = 0;
    while (true) {
        console.log(i);
        i++;
        if (i == 10) break;
    }

Замечание: оператор continue хорошо использовать для отсечения большого кода

    let i = 0;
    while (true) {
        // много кода
        i++;
        // условие продолжения => continue
        // много кода
    }    

Замечание: если не меняется условие (его данные), то будет бесконечный цикл
Замечание: некоторые системы останавливаются сами, некоторые Ctrl + C

    let i = 0;
    while (i < 100) {
      if (i % 3 === 0) {
        continue;
      }
      i = i + 2;
    }


Оператор Switch
===============

Switch используется когда надо сравнить переменную с несколькими вариантами

    switch (x) {
      case option1:
        // блок кода 1
        break;               <== если не поставить, то все ниже выполнится 
      case option2:
        // блок кода 2
        break;
      default:
        // блок кода (для остальных вариантов)
    }

Пример: по номеру места вывести поздравление

    let p = 2;
    switch (p) {
        case 1:
            console.log('У вас первое место!');
            break;
        case 2:
            console.log('У вас второе место!');
            break;
        case 3:
            console.log('У вас третье место!');
            break;
        default:
            console.log('Нет такого места!');
            break;
    }

Замечание: все блоки внутри switch имеют одну область видимости
Замечание: это может привести к ошибкам, если внутри case1|case2 много кода
Замечание: самый простой способ = окружить каждый блок внутри case {}

    let p = 2;
    switch (p) {
        case 1: {
            console.log('У вас первое место!');
            break;   
        }   
        case 2: {
            console.log('У вас второе место!');
            break;   
        }
        case 3: {
            console.log('У вас третье место!');
            break;   
        }
        default: {
            console.log('Нет такого места');
            break;   
        }
    }

Замечание: вместо переменной внутри switch можно оценивать выражение

    switch (typeof x) {
      case 'string':
        // код если х это строка
        break;
      case 'number':
        // код если х это число
        break;
      default:
        // код если ни строка, ни число
    }


Задача 7-8 "Vehicle Purchase"

  Задача: обработать задачи про машину

    // нужна ли лицензия для управления (нужна car, truck)
    export function needsLicense(kind) {
      if (kind == 'car' || kind == 'truck') { return true; }
      return false;
    }

    // вернуть первое значение словаря, сортированного по порядку
    export function chooseVehicle(option1, option2) {
      const a = [option1, option2];
      return `${a.sort()[0]} is clearly the better choice.`;
    }

    // вернуть цену машины: меньше 3 лет = 80% цены, 3-10 = 70%, больше 10 = 50%
    export function calculateResellPrice(originalPrice, age) {
      if (age < 3) { return originalPrice * 0.8; }
      if (age >= 3 && age <= 10) { return originalPrice * 0.7; }
      if (age > 10) { return originalPrice * 0.5; }
    }

