
Лекция 25: трансформация массивов
=================================

Трансформация массивов
======================

1) Использовать встроенные методы массовов проще, чем циклы
2) Некоторые методы являются `pure` (чистые), не трогают массив, делают новый
3) Некоторые местоды меняют исходный массив (что не всегда нужно)

Некоторые методы массивов
=========================

  1) Метод map (pure) = создает новый массив, применяя функцию ко всем элементам
  ===================

    let arr = [1, 2, 3, 4];
    const newArr = arr.map((value) => value - 1);
    console.log(arr);
    console.log(newArr);

    Замечание: оба массива будут одинаковой длины

  2) Метод filter (pure) = пропускает массив через функцию, ок = в новый массив
  ======================

    let arr = [1,2,3,4,5,6,7,8,9];
    arr.filter((value) => value % 2 === 0);

    Замечание: длина массивов может быть разная (у исходного больше)

  3) Метод reduce (pure) = сокращает массив до одного значения
  ======================

    1) Метод принимает функцию (параметр1, параметр2)
    2) параметр1 это аккумулятор, туда будут собираться число (ответ)
    3) параметр2 это текущий элемент массива (1,2,3,...)
    4) функция что-то делает с парам1 и парам2 => парам1

    let a = [1,2,3];
    let b = a.reduce( (acc, val) => acc + val );
    console.log(b);

    let arr = [1, 2, 3, 4];
    let b = arr.reduce(
      (acc, val) => {
          if (val % 2 === 0) {
            acc.even.push(val);
          } else {
            acc.odd.push(val);
          }
          return acc;
        }, { even: [], odd: [] }
    );
    console.log(b);

  4) Метод reverse = развернуть массив
  ================

  5) Метод slice = создает подмассив [начало...конец] (конец не включен)
  ==============

    1) если не указать начало, то это 0
    2) если не указать конец, то это конец
    3) если надо взять последний элемент, то это -1

    const arr = [1, 2, 3, 4];
    arr.slice(1, 2);                 // [2]
    arr.slice(1);                    // [2, 3, 4]
    arr.slice(-2);                   // [3, 4]    

  6) Метод splice = удаляет/заменяет элементы массива
  ===============

    1) парам1 = индекс, с которого надо начать
    2) парам2 = количество элементов для удаления
    3) парам3 = элементы для вставки (не обязательно)
    4) метод возвращает удаленные элементы

    const arr = ['1', '2', '5', '6'];
    arr.splice(2, 0, '3');
    console.log(arr);

    const removed = arr.splice(3, 2, '4', '5');
    console.log(removed);
    console.log(arr);

    arr.splice(1, 1);
    console.log(arr);

  7) Метод sort = сортирует элементы массива (как строки)
  =============

    1) исходный массив изменяется
    2) метод возвращает изменный массив
    3) можно передать свою функцию сортировки

    const arr = ['c', 'a', 'z', 'b'];
    const result = arr.sort();
    console.log(result);
    console.log(arr);

    # свой метод
    const arr = [3, 1, 2, 10];
    arr.sort((a, b) => a - b);

    Замечание: общий принцип такой

      1) оцениваем (a-b)
      2) если оно отрицательное, то b больше
      3) если оно положительное, то a больше
      4) если 0, то a === b


Задача 25 "Elyses Transformative Enchantments"
==============================================

  Задача: Элиза играет с картами, заставляя их меняться

  1) map = применить ко всем
  2) filter = взять те, которые ок
  3) reduce = пройти и сжать до числа
  4) reverse = развернуть
  5) slice = подмассив [end...fin]
  6) splice = удаляет/заменяет часть
  7) sort = сортирует


    // удвоить кажду карту
    export function seeingDouble(deck) {
      return deck.map( (c) => c*2 );
    }

    // утроить каждую карту, если она = 3
    export function threeOfEachThree(deck) {
      let answer = [];
      for (let el of deck) {
        if (el == 3) {
          answer.push(3);
          answer.push(3);
          answer.push(3);
        } else {
          answer.push(el);
        }
      }
      return answer;
    }

    // из 10 карт оставить 4-5
    export function middleTwo(deck) {
      return deck.slice(4,6);
    }

    // левую и правую карту положить в центр колоды наоборот
    export function sandwichTrick(deck) {
      let a = deck.pop();
      let b = deck.shift();
      deck.splice(deck.length/2, 0, a);
      deck.splice(deck.length/2+1, 0, b);
      return deck;
    }

    // удалить все карты, кроме 2
    export function twoIsSpecial(deck) {
      return deck.filter( (c) => c == 2 );
    }

    // отсортировать колоду
    export function perfectlyOrdered(deck) {
      return deck.sort((a, b) => a - b);
    }

    // сделать обратный порядок
    export function reorder(deck) {
      return deck.reverse();
    }

